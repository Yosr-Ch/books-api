# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.author import Author  # noqa: F401,E501
from swagger_server import util


class Book(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, isbn: str=None, name: str=None, price: float=None, author: Author=None, status: str=None):  # noqa: E501
        """Book - a model defined in Swagger

        :param id: The id of this Book.  # noqa: E501
        :type id: int
        :param isbn: The isbn of this Book.  # noqa: E501
        :type isbn: str
        :param name: The name of this Book.  # noqa: E501
        :type name: str
        :param author: The author of this Book.  # noqa: E501
        :type author: Author
        :param price: The price of this Book.  # noqa: E501
        :type price: float
        :param status: The status of this Book.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'id': int,
            'isbn': str,
            'name': str,
            'author': Author,
            'price': float,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'isbn': 'isbn',
            'name': 'name',
            'author': 'author',
            'price': 'price',
            'status': 'status'
        }
        self._id = id
        self._isbn = isbn
        self._name = name
        self._author = author
        self._price = price
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Book':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Book of this Book.  # noqa: E501
        :rtype: Book
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Book.


        :return: The id of this Book.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Book.


        :param id: The id of this Book.
        :type id: int
        """

        self._id = id

    @property
    def isbn(self) -> str:
        """Gets the isbn of this Book.


        :return: The isbn of this Book.
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn: str):
        """Sets the isbn of this Book.


        :param isbn: The isbn of this Book.
        :type isbn: str
        """
        if isbn is None:
            raise ValueError("Invalid value for `isbn`, must not be `None`")  # noqa: E501

        self._isbn = isbn

    @property
    def name(self) -> str:
        """Gets the name of this Book.


        :return: The name of this Book.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Book.


        :param name: The name of this Book.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def price(self) -> float:
        """Gets the price of this Book.


        :return: The price of this Book.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Book.


        :param price: The price of this Book.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def author(self) -> Author:
        """Gets the author of this Book.


        :return: The author of this Book.
        :rtype: Author
        """
        return self._author

    @author.setter
    def author(self, author: Author):
        """Sets the author of this Book.


        :param author: The author of this Book.
        :type author: Author
        """

        self._author = author

    @property
    def status(self) -> str:
        """Gets the status of this Book.

        book status in the store  # noqa: E501

        :return: The status of this Book.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Book.

        book status in the store  # noqa: E501

        :param status: The status of this Book.
        :type status: str
        """
        allowed_values = ["available", "pending", "sold"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
